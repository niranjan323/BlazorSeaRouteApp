@page "/"
@inject IJSRuntime JS
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components.Web

<div class="map-container">
    <!-- Map -->
    <div id="map"></div>

    <!-- Floating UI -->
    <div class="overlay">
        <!-- Header with Tabs and Close Button -->
        <div class="header">
            <div class="tabs">
                <button class="tab-btn @(selectedTab == 1 ? "active" : "")" @onclick="() => SelectTab(1)">
                    Start New Calculation
                </button>
                <button class="tab-btn @(selectedTab == 2 ? "active" : "")" @onclick="() => SelectTab(2)">
                    My Routes
                </button>
            </div>
            <button class="close-btn" @onclick="CloseOverlay">×</button>
        </div>

        <!-- Scrollable Content -->
        <div class="form-container">
            @if (selectedTab == 1)
            {
                @if (selectedForm == 0)
                {
                    <!-- Show Selection Options -->
                    <div class="cls_flex cls_flex_justify_center cls_margin_top_10px">
                        <label class="cls_main_label">
                            Select your calculation option below:
                        </label>
                    </div>
                
                    <div class="calculation-options">
                        <div class="option-card" @onclick="() => ShowForm(1)">
                            <img src="reduction-factor.png" alt="Reduction Factor">
                            <h4>Reduction Factor Calculations</h4>
                        </div>
                        <div class="option-card" @onclick="() => ShowForm(2)">
                            <img src="limited-short.png" alt="Limited Short">
                            <h4>Limited Short Voyage</h4>
                        </div>
                    </div>
                }
                @if (selectedForm == 1)
                {
                    <!-- Back Button -->
                    @* <button class="back-btn" @onclick="GoBack">⬅ Back</button> *@

                    <button class="back-btn" @onclick="GoBack">⬅ Back</button>

                    <div class="route_content">
                        <!-- Route Name Section -->

                        <div class="cls_route_div">
                            <div class="cls_route_div_rep">
                                <div class="cls_flex cls_flex_gap_8px cls_flex_align_center">
                                    <img src="group-92@1x.png" alt="Route Icon" class="icon" />
                                    <h3 class="route_content_heading">
                                        Customize Route
                                    </h3>
                                </div>
                            </div>
                        </div>


                        <div class="cls_route_div">
                            <div class="cls_route_div_rep">

                                <div class="content_div">
                                    <label class="content_div_label1">Route Name</label>
                                    <input type="text" class="content_div_input" @bind="routeModel.RouteName" placeholder="Enter route name" />
                                </div>
                            </div>
                        </div>

                        <!-- Departure Section -->
                        <div class="cls_route_div">
                            <div class="cls_route_div_rep">
                                <h4 class="route_content_heading1">Port of Departure</h4>

                                <!-- Static Display for First Time -->
                                <div class="cls_sub_heading">
                                    <span class="content_div_label_blue">FRMRS</span>
                                    <span class="content_div_label">Marseille, France</span>
                                </div>
                                @*  <input type="text" class="content_div_input cls_margin_top_6px" style="font-weight: 500;" value="Marseille" placeholder="Enter route name" /> *@
                                <div class="cls_input_outline cls_flex_gap_8px cls_margin_top_6px">
                                    <input type="text" class=" " value="Marseille" placeholder="Enter route name" />
                                    <img src="./path-484@1x.png" class="icon" />
                                </div>


                                <!-- Add Port Button -->
                                <div class="cls_btn_div">
                                    <button class="cls_button_light" @onclick="AddDeparturePort">+ Add Port</button>
                                    <button class="cls_button_light" @onclick="AddDepartureWaypoint">+ Add Waypoint</button>
                                </div>
                            </div>
                        </div>


                        <!-- Dynamic Departure Ports Section -->
                        @foreach (var port in routeModel.DeparturePorts)
                        {
                            <div class="cls_route_div port-card">

                                <div class="cls_route_div_rep">
                                    <h4 class="route_content_heading1">landing port1</h4>

                                    <div class="cls_sub_heading">
                                        <span class="content_div_label_blue">FRMRS</span>

                                        <div class="cls_flex cls_flex_gap_8px">
                                            <span class="content_div_label">Port of Departure</span>
                                            @*  <button class="cls_button_light btn-small" @onclick="() => RemoveDeparturePort(port)">-</button> *@
                                            @* <img src="path-209@1x.png" alt="Remove" class="btn-small" @onclick="() => RemoveDeparturePort(port)" /> *@
                                            <div class="cls_btn_minimize" @onclick="() => RemoveDeparturePort(port)">
                                                <div class="cls_btn_minimize_div"></div>
                                            </div>
                                        </div>

                                    </div>

                                    <div class="cls_sub_heading">
                                        <span class="content_div_label">@port.Port?.Unlocode</span>
                                        <span class="content_div_label_blue">@port.Port?.Name  @port.Port?.Country</span>
                                    </div>

                                    <!-- Port Search Section -->
                                    <div class="port-search-container">
                                        <input type="text" class="content_div_input w-100 cls_margin_top_6px"
                                               @bind="port.SearchTerm"
                                               @bind:event="oninput"
                                               @onkeyup="() => SearchDeparturePortsForExisting(port)"
                                               placeholder="Search ports..." />
                                        @if (port.SearchResults.Any())
                                        {
                                            <div class="search-results">
                                                @foreach (var result in port.SearchResults)
                                                {
                                                    <div class="search-result-item" @onclick="() => UpdateDeparturePort(port, result)">
                                                        <span>@result.Name, @result.Country (@result.Unlocode)</span>
                                                    </div>
                                                }
                                            </div>
                                        }
                                    </div>
                                    <div class="cls_btn_div">
                                        <button class="cls_button_light" @onclick="AddDeparturePort">+ Add Port</button>
                                        <button class="cls_button_light" @onclick="AddDepartureWaypoint">+ Add Waypoint</button>
                                    </div>
                                </div>
                            </div>

                        }


                        <!-- Dynamic Departure Waypoints -->
                        @foreach (var waypoint in routeModel.DepartureWaypoints)
                        {
                            <div class="cls_route_div">
                                <div class="cls_route_div_rep">
                                   
                                    <div class="cls_sub_heading">
                                        <span class="content_div_label_blue">FRMRS</span>

                                        <div class="cls_flex cls_flex_gap_8px">
                                            <span class="content_div_label">Port of Departure</span>
                                            <div class="cls_btn_minimize">
                                                <div class="cls_btn_minimize_div" @onclick="() => RemoveDepartureWaypoint(waypoint)"></div>
                                            </div>
                                        </div>

                                    </div>

                                    <div style="display: flex; align-items: center; gap: 10px; flex-wrap: nowrap;">

                                        <label class="content_div_label">Latitude:</label>
                                        <input type="text" class="content_div_input" style="width: 100px;" @bind="waypoint.Latitude" placeholder="Latitude" />

                                        <label class="content_div_label">Longitude:</label>
                                        <input type="text" class="content_div_input" style="width: 100px;" @bind="waypoint.Longitude" placeholder="Longitude" />

                                        <img src="path-424-7@1x.png" alt="icon" style="width: 20px; height: 20px;" />

                                    </div>
                                    <div class="cls_btn_div">
                                        <button class="cls_button_light" @onclick="AddDeparturePort">+ Add Port</button>
                                        <button class="cls_button_light" @onclick="AddDepartureWaypoint">+ Add Waypoint</button>
                                    </div>
                                    @*       <img src="path-209@1x.png" alt="Remove" class=" btn-small" @onclick="() => RemoveDepartureWaypoint(waypoint)" />
                                <label>Waypoint Name:</label>
                                <input type="text" class="content_div_input cls_margin_top_6px" style="font-weight: 500;" @bind="waypoint.Name" />
                           *@  
                                   </div>
                            </div>

                        }

                        <!-- Arrival Section -->
                        <div class="cls_route_div">
                            <div class="cls_route_div_rep">
                                <h4 class="route_content_heading1">Port of Arrival</h4>

                                <!-- Static Display for First Time -->
                                <div class="cls_sub_heading">
                                    <span class="content_div_label_blue">SGSIN</span>
                                    <span class="content_div_label">Singapore</span>
                                </div>
                                @* <input type="text" class="content_div_input cls_margin_top_6px" style="font-weight: 500;" value="Marseille" placeholder="Enter route name" /> *@
                                @* <input type="text" class="content_div_input cls_margin_top_6px" style="font-weight: 500; background: url('path-424-7@1x.png') no-repeat right 8px center; background-size: 16px 16px;" value="Marseille" placeholder="Enter route name" /> *@

                                <div class="cls_margin_top_6px cls_input_outline cls_flex_gap_8px">
                                    <input type="text" class="" value="Marseille" placeholder="Enter route name" />
                                    <img src="./path-424-7@1x.png" alt="Alternate Text" />

                                </div>

                                <!-- Add Port Button -->
                                <div class="cls_btn_div">
                                    <button class="cls_button_light" @onclick="AddArrivalPort">+ Add Port</button>
                                    <button class="cls_button_light" @onclick="AddArrivalWaypoint">+ Add Waypoint</button>
                                </div>
                            </div>
                        </div>

                        <!-- Dynamic Arrival Ports Section -->
                        @foreach (var port in routeModel.ArrivalPorts)
                        {
                            <div class="cls_route_div port-card">

                                <div class="cls_route_div_rep">
                                    <!--!--><h4 class="route_content_heading1">landing port1</h4>

                                    <!--!--><div class="cls_sub_heading">
                                        <span class="content_div_label_blue">FRMRS</span>

                                        <div class="cls_flex cls_flex_gap_8px">
                                            <span class="content_div_label">Port of Departure</span>
                                            <div class="cls_btn_minimize" @onclick="() => RemoveArrivalPort(port)"><div class="cls_btn_minimize_div"></div></div>
                                        </div>
                                    </div>



                                    <div class="content_div">
                                        <span class="content_div_label">@port.Port?.Unlocode</span>
                                        <span class="content_div_label">@port.Port?.Name, @port.Port?.Country</span>
                                    </div>

                                    <!-- Port Search Section -->
                                    <div class="port-search-container">
                                        <input type="text" class="content_div_input w-100 cls_margin_top_6px"
                                               value="@port.Port?.Name"
                                               @oninput="e => port.SearchTerm = e.Value.ToString()"
                                               @onkeyup="() => SearchArrivalPortsForExisting(port)"
                                               placeholder="Search ports..." />

                                        @if (port.SearchResults.Any())
                                        {
                                            <div class="search-results">
                                                @foreach (var result in port.SearchResults)
                                                {
                                                    <div class="search-result-item" @onclick="() => UpdateArrivalPort(port, result)">
                                                        <span>@result.Name, @result.Country (@result.Unlocode)</span>
                                                    </div>
                                                }
                                            </div>
                                        }
                                    </div>
                                </div>


                            </div>
                        }

                        <!-- Dynamic Arrival Waypoints -->
                        @foreach (var waypoint in routeModel.ArrivalWaypoints)
                        {

                            <div class="cls_route_div">
                                <div class="cls_route_div_rep">
                                  
                                    
                                    <div class="cls_sub_heading">
                                        <span class="content_div_label_blue">FRMRS</span>

                                        <div class="cls_flex cls_flex_gap_8px">
                                            <span class="content_div_label">Port of Departure</span>
                                            <div class="cls_btn_minimize" @onclick="() => RemoveArrivalWaypoint(waypoint)">
                                                <div class="cls_btn_minimize_div"></div>
                                            </div>
                                        </div>
                                    </div>

                                    <div style="display: flex; align-items: center; gap: 10px; flex-wrap: nowrap;">

                                        <label class="content_div_label">Latitude:</label>
                                        <input type="text" class="content_div_input" style="width: 100px;" @bind="waypoint.Latitude" placeholder="Latitude" />

                                        <label class="content_div_label">Longitude:</label>
                                        <input type="text" class="content_div_input" style="width: 100px;" @bind="waypoint.Longitude" placeholder="Longitude" />

                                        <img src="path-424-7@1x.png" alt="icon" style="width: 20px; height: 20px;" />

                                    </div>

                                    <div class="cls_btn_div">
                                        <button class="cls_button_light" @onclick="AddDeparturePort">+ Add Port</button>
                                        <button class="cls_button_light" @onclick="AddDepartureWaypoint">+ Add Waypoint</button>
                                    </div>



                                </div>
                            </div>

                            @*     <div class="waypoint-card">

                                <img src="path-209@1x.png" alt="Remove" class=" btn-small" @onclick="() => RemoveArrivalWaypoint(waypoint)" />
                                <label>Waypoint Name:</label>
                                <input type="text" class="content_div_input cls_margin_top_6px" @bind="waypoint.Name" />
                            </div> *@
                        }

                        @*     <div class="flex-row-2">
                            <div class="calculate_route_reduction_factor">
                                <span>Calculate Route Reduction Factor</span>
                            </div>
                        </div> *@

                        <div class="cls_flex cls_flex_justify_center cls_mar_top_btm_22px">
                            <button class="cls_button_blue">Calculate Route Reduction Factor</button>
                        </div>
                    </div>
                }

                else if (selectedForm == 2)
                {
                    <button class="back-btn" @onclick="GoBack">⬅ Back</button>

                    <div class="cls_block">
                        <div class="route_content">
                            <div class="cls_route_div_rep">
                                <div class="cls_flex cls_flex_gap_8px cls_flex_align_center">
                                    <img src="group-92@1x.png" alt="Route Icon" class="icon">
                                    <h3 class="route_content_heading">
                                        Limited Short Voyage Reduction Factor
                                    </h3>
                                </div>
                            </div>

                            <div class="cls_flex cls_flex_gap_8px cls_padding_14px_22px">
                                <div class="cls_flex cls_flex_column cls_flex_gap_4px cls_flex_div_w33 cls_flex_justify_end">
                                    <span class="content_div_label">Vessel Name</span>
                                    <input type="text" class="content_div_input" style="flex: 1;" placeholder="ABC" />

                                </div>
                                <div class="cls_flex cls_flex_column cls_flex_gap_4px cls_flex_div_w33 cls_flex_justify_end">

                                    <span class="content_div_label">Vessel IMO</span>
                                    <input type="text" class="content_div_input" style="flex: 1;" placeholder="9012345" />

                                </div>
                                <div class="cls_flex cls_flex_column cls_flex_gap_4px cls_flex_div_w33 cls_flex_justify_end">

                                    <label class="content_div_label">Vessel Details</label>
                                    <input type="text" class="content_div_input" style="flex: 1;" placeholder="100,000" />

                                </div>
                            </div>

                        </div>

                        <!-- Vessel Details Section -->



                        <div class="route_content cls_padding_14px_22px cls_flex_gap_8px">

                            <h3 class="route_content_heading cls_mar_btm_8px">
                                Port of Departure
                            </h3>

                            <div class="cls_flex cls_flex_gap_8px cls_flex_wrap cls_flex_row_gap_22px">
                                <div class="cls_flex cls_flex_column cls_flex_gap_4px cls_flex_div_w33 cls_flex_justify_end">
                                    <div class="cls_sub_heading">
                                        <span class="content_div_label_blue">NLRTM</span>
                                        <span class="content_div_label">Rotterdam, Netherlands</span>
                                    </div>


                                    <div class="cls_input_outline cls_flex_gap_8px ">
                                        <input type="text" class=" ">
                                        <img src="./path-484@1x.png" class="icon">
                                    </div>

                                </div>
                                <div class="cls_flex cls_flex_column cls_flex_gap_4px cls_flex_div_w33 cls_flex_justify_end">

                                    <span class="content_div_label">Date of Departure</span>
                                    <div class="cls_input_outline cls_flex_gap_8px ">
                                        <input type="text" class=" " value="Marseille">
                                        <img src="./path-484@1x.png" class="icon">
                                    </div>

                                </div>
                                <div class="cls_flex cls_flex_column cls_flex_gap_4px cls_flex_div_w33 cls_flex_justify_end">

                                    <label class="content_div_label">Estimated Time of Departure</label>
                                    <div class="cls_input_outline cls_flex_gap_8px ">
                                        <input type="text" class=" " value="Marseille">
                                        <img src="./path-484@1x.png" class="icon">
                                    </div>

                                </div>

                                <div class="cls_flex cls_flex_column cls_flex_gap_4px cls_flex_div_w33 cls_flex_justify_end">
                                    <h3 class="route_content_heading ">
                                        Port of Arrival
                                    </h3>
                                    <div class="cls_sub_heading">
                                        <span class="content_div_label_blue">GBDBL</span>
                                        <span class="content_div_label">Bangor, The United Kingdom</span>
                                    </div>


                                    <div class="cls_input_outline cls_flex_gap_8px ">
                                        <input type="text" class=" ">
                                        <img src="./path-484@1x.png" class="icon">
                                    </div>

                                </div>
                                <div class="cls_flex cls_flex_column cls_flex_gap_4px cls_flex_div_w33 cls_flex_justify_end">

                                    <span class="content_div_label">Date of Arrival</span>
                                    <div class="cls_input_outline cls_flex_gap_8px ">
                                        <input type="text" class=" " value="Marseille">
                                        <img src="./path-484@1x.png" class="icon">
                                    </div>

                                </div>
                                <div class="cls_flex cls_flex_column cls_flex_gap_4px cls_flex_div_w33 cls_flex_justify_end">

                                    <label class="content_div_label">Estimated time of Arrival</label>
                                    <div class="cls_input_outline cls_flex_gap_8px ">
                                        <input type="text" class=" " value="Marseille">
                                        <img src="./path-484@1x.png" class="icon">
                                    </div>

                                </div>

                                <div class="cls_flex cls_flex_column cls_flex_gap_4px cls_flex_div_w33 cls_flex_justify_end">
                                    <div class="cls_sub_heading">
                                        <span class="content_div_label">Time Zone:</span>
                                    </div>


                                    <div class="cls_input_outline cls_flex_gap_8px ">
                                        <input type="text" class=" ">
                                        <img src="./path-484@1x.png" class="icon">
                                    </div>

                                </div>
                                <div class="cls_flex cls_flex_column cls_flex_gap_4px cls_flex_div_w33 cls_flex_justify_end">

                                    <span class="content_div_label">Duration (Hrs):</span>
                                    <div class="cls_input_outline cls_flex_gap_8px ">
                                        <input type="text" class=" " value="Marseille">
                                        <img src="./path-484@1x.png" class="icon">
                                    </div>

                                </div>



                            </div>

                        </div>




                        <div class="route_content cls_padding_14px_22px cls_flex_row_gap_4px ">
                            <div class="cls_flex cls_flex_gap_8px cls_mar_btm_8px cls_flex_align_center">
                                <img src="group-92@1x.png" alt="Route Icon" class="icon">
                                <h3 class="route_content_heading ">Weather Forecast</h3>
                            </div>

                            <div class="cls_flex cls_flex_gap_8px cls_flex_wrap cls_flex_row_gap_22px">
                                <div class="cls_flex cls_flex_column cls_flex_gap_4px cls_flex_div_w33 cls_flex_justify_end">
                                    <span class="content_div_label">Date</span>
                                    <div class="cls_input_outline cls_flex_gap_8px ">
                                        <input type="text" class=" " value="Marseille">
                                    </div>
                                </div>

                                <div class="cls_flex cls_flex_column cls_flex_gap_4px cls_flex_div_w33 cls_flex_justify_end">
                                    <span class="content_div_label">Time:</span>
                                    <div class="cls_input_outline cls_flex_gap_8px ">
                                        <input type="text" class=" " value="Marseille">
                                    </div>
                                </div>

                                <div class="cls_flex cls_flex_column cls_flex_gap_4px cls_flex_div_w33 cls_flex_justify_end">
                                    <span class="content_div_label">
                                        Before ETD (Hrs):
                                    </span>
                                    <div class="cls_input_outline cls_flex_gap_8px ">
                                        <input type="text" class=" " value="Marseille">
                                    </div>
                                </div>
                            </div>



                        </div>


                        <div class="route_content cls_padding_14px_22px cls_flex_row_gap_4px ">
                            <div class="cls_flex cls_flex_gap_8px cls_mar_btm_8px cls_flex_align_center">
                                <img src="group-92@1x.png" alt="Route Icon" class="icon">
                                <h3 class="route_content_heading ">
                                    Forecast Maximum Significant Wave Height

                                </h3>
                            </div>

                            <div class="cls_flex cls_flex_gap_8px cls_flex_wrap cls_flex_row_gap_22px">
                                <div class="cls_flex cls_flex_column cls_flex_gap_4px cls_flex_div_w33 cls_flex_justify_end">
                                    <span class="content_div_label">Hswell [m]</span>
                                    <div class="cls_input_outline cls_flex_gap_8px ">
                                        <input type="text" class=" " value="Marseille">
                                        <img src="./path-484@1x.png" class="icon">
                                    </div>
                                </div>

                                <div class="cls_flex cls_flex_column cls_flex_gap_4px cls_flex_div_w33 cls_flex_justify_end">
                                    <span class="content_div_label">Hwind [m]</span>
                                    <div class="cls_input_outline cls_flex_gap_8px ">
                                        <input type="text" class=" " value="Marseille">
                                        <img src="./path-484@1x.png" class="icon">
                                    </div>
                                </div>

                                <div class="cls_flex cls_flex_column cls_flex_gap_4px cls_flex_div_w33 cls_flex_justify_end">
                                    <span class="content_div_label">Hs, max [m]</span>
                                    <div class="cls_input_outline cls_flex_gap_8px ">
                                        <input type="text" class=" " value="Marseille">
                                        <img src="./path-484@1x.png" class="icon">
                                    </div>
                                </div>
                            </div>

                            <div class="cls_flex cls_flex_gap_8px cls_flex_align_center">
                                <label class="route_content_heading1">Source :</label>
                                <a href="#"> www.weather.gov</a>
                            </div>

                        </div>

                        <div class="route_content cls_padding_14px_22px cls_flex_row_gap_4px ">
                            <div class="cls_flex cls_flex_gap_8px cls_mar_btm_8px cls_flex_align_center">
                                <img src="group-92@1x.png" alt="Route Icon" class="icon">
                                <h3 class="route_content_heading ">Forecast Maximum Significant Wave Height</h3>
                            </div>

                            <div class="cls_flex cls_flex_gap_8px cls_flex_wrap cls_flex_row_gap_22px">
                                <div class="cls_flex cls_flex_column cls_flex_gap_4px cls_flex_div_w33 cls_flex_justify_end">
                                    <span class="content_div_label">Date</span>
                                    <div class="cls_input_outline cls_flex_gap_8px ">
                                        <input type="text" class=" " value="Marseille">
                                    </div>
                                </div>

                                <div class="cls_flex cls_flex_column cls_flex_gap_4px cls_flex_div_w33 cls_flex_justify_end">
                                    <span class="content_div_label">Hwind [m]:</span>
                                    <div class="cls_input_outline cls_flex_gap_8px ">
                                        <input type="text" class=" " value="Marseille">
                                    </div>
                                </div>

                                <div class="cls_flex cls_flex_column cls_flex_gap_4px cls_flex_div_w33 cls_flex_justify_end">
                                    <span class="content_div_label">
                                        Hs, max [m]
                                    </span>
                                    <div class="cls_input_outline cls_flex_gap_8px ">
                                        <input type="text" class=" " value="Marseille">
                                    </div>
                                </div>
                            </div>



                        </div>

                        <div class="route_content cls_padding_14px_22px cls_flex_row_gap_4px ">
                            <div class="cls_flex cls_flex_gap_8px cls_mar_btm_8px cls_flex_align_center">
                                <img src="group-92@1x.png" alt="Route Icon" class="icon">
                                <h3 class="route_content_heading ">Output</h3>
                            </div>

                            <div class="cls_flex cls_flex_gap_8px cls_flex_wrap cls_flex_row_gap_22px">
                                <div class="cls_flex cls_flex_column cls_flex_gap_4px cls_flex_div_w33 cls_flex_justify_end">
                                    <span class="content_div_label">Date</span>
                                    <div class="cls_input_outline cls_flex_gap_8px ">
                                        <input type="text" class=" " value="Marseille">
                                    </div>
                                </div>

                                <div class="cls_flex cls_flex_column cls_flex_gap_4px cls_flex_div_w33 cls_flex_justify_end">
                                    <span class="content_div_label">Hwind [m]:</span>
                                    <div class="cls_input_outline cls_flex_gap_8px ">
                                        <input type="text" class=" " value="Marseille">
                                    </div>
                                </div>

                                <div class="cls_flex cls_flex_column cls_flex_gap_4px cls_flex_div_w33 cls_flex_justify_end">
                                    <span class="content_div_label">
                                        Hs, max [m]
                                    </span>
                                    <div class="cls_input_outline cls_flex_gap_8px ">
                                        <input type="text" class=" " value="Marseille">
                                    </div>
                                </div>

                                
                            </div>



                        </div>

                        <!-- Forecast Maximum Significant Wave Height Section -->
                        <!-- Button Section -->
                        <div class="content_div" style="align-items:center; margin-top: 15px;">
                            <button class="btn btn-primary">Calculate Limited Short Voyage</button>
                        </div>
                    </div>
                }
            }
            else if (selectedTab == 2)
            {
                <p>My Routes content here...</p>
            }
        </div>
    </div>
</div>

@code {  
    private int selectedTab = 1;
    private int selectedForm = 0;

    private void SelectTab(int tab) => selectedTab = tab;
    private void CloseOverlay() { /* Logic to hide overlay */ }
    private void ShowForm(int option) => selectedForm = option;
    private void GoBack() => selectedForm = 0;
    private List<PortModel> _ports;
    private VoyageModel voyageModel = new();

    protected async override Task OnInitializedAsync()
    {
        await Task.CompletedTask;
        await GetSampleports();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initializeMap");
            // if (selectedTab == 1 && !graphInitialized) // Check tab and prevent duplicate calls
            // {
            //     graphInitialized = true;
            //     await JS.InvokeVoidAsync("initializeGraph");
            // }
        }
    }
    private RouteModel routeModel = new RouteModel();
    private string departureSearchTerm = string.Empty;
    private string arrivalSearchTerm = string.Empty;
    private List<PortModel> departureSearchResults = new List<PortModel>();
    private List<PortModel> arrivalSearchResults = new List<PortModel>();

    private void SearchDeparturePorts()
    {
        departureSearchResults = SearchPorts(departureSearchTerm);
    }

    private void SearchArrivalPorts()
    {
        arrivalSearchResults = SearchPorts(arrivalSearchTerm);
    }

    private void SelectDeparturePort(PortModel port)
    {
        var portSelection = new PortSelectionModel { Port = port };
        routeModel.DeparturePorts.Add(portSelection);
        departureSearchTerm = string.Empty;
        departureSearchResults.Clear();
    }

    private void SelectArrivalPort(PortModel port)
    {
        var portSelection = new PortSelectionModel { Port = port };
        routeModel.ArrivalPorts.Add(portSelection);
        arrivalSearchTerm = string.Empty;
        arrivalSearchResults.Clear();
    }

    private void SearchDeparturePortsForExisting(PortSelectionModel portSelection)
    {
        if (portSelection?.SearchTerm == null || _ports == null)
        {
            return;
        }
        portSelection.SearchResults = SearchPorts(portSelection.SearchTerm);
    }

    private void SearchArrivalPortsForExisting(PortSelectionModel portSelection)
    {
        if (portSelection?.SearchTerm == null || _ports == null)
        {
            return;
        }
        portSelection.SearchResults = SearchPorts(portSelection.SearchTerm);
    }

    private void UpdateDeparturePort(PortSelectionModel portSelection, PortModel newPort)
    {
        portSelection.Port = newPort;
        portSelection.SearchTerm = newPort.Name;
        portSelection.SearchResults.Clear();
    }

    private void UpdateArrivalPort(PortSelectionModel portSelection, PortModel newPort)
    {
        portSelection.Port = newPort;
        portSelection.SearchTerm = newPort.Name;
        portSelection.SearchResults.Clear();
    }

    private void AddDeparturePort()
    {
        routeModel.DeparturePorts.Add(new PortSelectionModel());
    }

    private void AddArrivalPort()
    {
        routeModel.ArrivalPorts.Add(new PortSelectionModel());
    }

    private void RemoveDeparturePort(PortSelectionModel port)
    {
        routeModel.DeparturePorts.Remove(port);
    }

    private void RemoveArrivalPort(PortSelectionModel port)
    {
        routeModel.ArrivalPorts.Remove(port);
    }

    private void AddDepartureWaypoint()
    {
        routeModel.DepartureWaypoints.Add(new WaypointModel());
    }

    private void AddArrivalWaypoint()
    {
        routeModel.ArrivalWaypoints.Add(new WaypointModel());
    }

    private void RemoveDepartureWaypoint(WaypointModel waypoint)
    {
        routeModel.DepartureWaypoints.Remove(waypoint);
    }

    private void RemoveArrivalWaypoint(WaypointModel waypoint)
    {
        routeModel.ArrivalWaypoints.Remove(waypoint);
    }

    private void CalculateRouteReductionFactor()
    {
        // Placeholder for route reduction factor calculation
        Console.WriteLine("Calculating Route Reduction Factor...");
    }


    public class RouteModel
    {
        public string RouteName { get; set; } = string.Empty;
        public string DepartureLocation { get; set; } = string.Empty;
        public string ArrivalLocation { get; set; } = string.Empty;
        public List<PortSelectionModel> DeparturePorts { get; set; } = new List<PortSelectionModel>();
        public List<PortSelectionModel> ArrivalPorts { get; set; } = new List<PortSelectionModel>();
        public List<WaypointModel> DepartureWaypoints { get; set; } = new List<WaypointModel>();
        public List<WaypointModel> ArrivalWaypoints { get; set; } = new List<WaypointModel>();
    }

    public class PortSelectionModel
    {
        public PortModel? Port { get; set; }
        public string SearchTerm { get; set; } = string.Empty;
        public List<PortModel> SearchResults { get; set; } = new List<PortModel>();
    }

    public class PortModel
    {
        public int Legacy_Place_Id { get; set; }
        public string Port_Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string Country_Id { get; set; } = string.Empty;
        public string Country { get; set; } = string.Empty;
        public string Country_Code { get; set; } = string.Empty;
        public string Admiralty_Chart { get; set; } = string.Empty;
        public string Unlocode { get; set; } = string.Empty;
        public string Principal_Facilities { get; set; } = string.Empty;
        public double Latitude { get; set; }
        public double Longitude { get; set; }
        public string Port_Authority { get; set; } = string.Empty;
        public DateTime Last_Updated { get; set; }
    }

    public class WaypointModel
{
    public string Name { get; set; } = string.Empty;
    public string Latitude { get; set; } = string.Empty;
    public string Longitude { get; set; } = string.Empty;
}

    protected async Task GetSampleports()
    {
        _ports = new List<PortModel>
{
new PortModel
{
Legacy_Place_Id = 5000,
Port_Id = "POR-03000",
Name = "Marseille",
Country = "France",
Country_Code = "FRA",
Unlocode = "FRMRS",
Latitude = 43.2965,
Longitude = 5.3698
},
new PortModel
{
Legacy_Place_Id = 5001,
Port_Id = "POR-03001",
Name = "Singapore",
Country = "Singapore",
Country_Code = "SGP",
Unlocode = "SGSIN",
Latitude = 1.3521,
Longitude = 103.8198
},
// Add more sample ports as needed
};

    }



    public List<PortModel> SearchPorts(string searchTerm)
    {

        if (string.IsNullOrWhiteSpace(searchTerm) || _ports == null)
        {
            departureSearchResults.Clear();
            return [] ;
        }
        if (string.IsNullOrWhiteSpace(searchTerm))
            return new List<PortModel>();

        return _ports.Where(p =>
        p.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
        p.Country.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
        p.Unlocode.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
        ).ToList();
    }

    public class VoyageModel
    {
        public string DeparturePort { get; set; } = "";
        public string ArrivalPort { get; set; } = "";
        public int Distance { get; set; }
        public string SeaState { get; set; } = "";
        public int WindSpeed { get; set; }
        public int WaveHeight { get; set; }
    }
}
