// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using NextGenEngApps.DigitalRules.CRoute.DAL.Models;
using SeaRouteModel.Models;
using System;
using System.Collections.Generic;
using System.Reflection.Emit;

namespace NextGenEngApps.DigitalRules.CRoute.DAL.Context;

public partial class ApplicationDbContext : DbContext
{
    private readonly ILoggerFactory _loggerFactory;

    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options, ILoggerFactory loggerFactory)
        : base(options)
    {
        try
        {
            Database.CanConnect();
            Console.WriteLine("Database connection successful.");
            _loggerFactory = loggerFactory;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Database connection failed: {ex.Message}");
        }
    }

    // Existing DbSets
    public virtual DbSet<Country> Countries { get; set; }
    public virtual DbSet<GeoPoint> GeoPoints { get; set; }
    public virtual DbSet<Port> Ports { get; set; }
    public virtual DbSet<Record> Records { get; set; }
    public virtual DbSet<User> Users { get; set; }
    public virtual DbSet<Vessel> Vessels { get; set; }

    // Updated/New DbSets
    public virtual DbSet<ShortVoyageRecord> ShortVoyageRecords { get; set; }
    public virtual DbSet<SeasonType> SeasonTypes { get; set; }
    public virtual DbSet<VoyageLegReductionFactor> VoyageLegReductionFactors { get; set; }
    public virtual DbSet<RecordReductionFactor> RecordReductionFactors { get; set; }
    public virtual DbSet<RoutePoint> RoutePoints { get; set; }
    public virtual DbSet<RouteVersion> RouteVersions { get; set; }
    public virtual DbSet<VoyageLeg> VoyageLegs { get; set; }
    public virtual DbSet<Group> Groups { get; set; }
    public virtual DbSet<Customer> Customers { get; set; }
    public virtual DbSet<GroupUser> GroupUsers { get; set; }
    public virtual DbSet<RecordUser> RecordUsers { get; set; }
    public virtual DbSet<RecordVessel> RecordVessels { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        // Existing entity configurations
        modelBuilder.Entity<Country>(entity =>
        {
            entity.HasKey(e => e.CountryCode);
            entity.ToTable("countries");

            entity.Property(e => e.CountryCode)
                .HasMaxLength(5)
                .HasColumnName("country_code");
            entity.Property(e => e.CountryName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("country_name");
        });

        modelBuilder.Entity<GeoPoint>(entity =>
        {
            entity.HasKey(e => e.GeoPointId).HasName("PK_Points");
            entity.ToTable("geo_points");

            entity.Property(e => e.GeoPointId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("geo_point_id");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("created_by");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.Latitude).HasColumnName("latitude");
            entity.Property(e => e.Longitude).HasColumnName("longitude");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("modified_date");
        });

        modelBuilder.Entity<Port>(entity =>
        {
            entity.HasKey(e => e.GeoPointId).HasName("PK_Ports");
            entity.ToTable("ports");

            entity.Property(e => e.GeoPointId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("geo_point_id");
            entity.Property(e => e.CountryCode)
                .IsRequired()
                .HasMaxLength(5)
                .HasColumnName("country_code");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("created_by");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("modified_date");
            entity.Property(e => e.PortAuthority)
                .HasMaxLength(255)
                .HasColumnName("port_authority");
            entity.Property(e => e.PortName)
                .HasMaxLength(50)
                .HasColumnName("port_name");
            entity.Property(e => e.Unlocode)
                .HasMaxLength(10)
                .HasColumnName("unlocode");

            entity.HasOne(d => d.CountryCodeNavigation).WithMany(p => p.Ports)
                .HasForeignKey(d => d.CountryCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ports_countries");

            entity.HasOne(d => d.GeoPoint).WithOne(p => p.Port)
                .HasForeignKey<Port>(d => d.GeoPointId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ports_geo_points");
        });

        modelBuilder.Entity<Record>(entity =>
        {
            entity.HasKey(e => e.RecordId);
            entity.ToTable("records");

            entity.Property(e => e.RecordId)
                .HasColumnName("record_id");
            entity.Property(e => e.ArrivalPort).HasColumnName("arrival_port");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("created_by");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.DeparturePort).HasColumnName("departure_port");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("modified_date");
            entity.Property(e => e.ReductionFactor).HasColumnName("reduction_factor");
            entity.Property(e => e.RouteDistance).HasColumnName("route_distance");
            entity.Property(e => e.RouteName)
                .HasMaxLength(60)
                .HasColumnName("route_name");
            entity.Property(e => e.SeasonType)
                .HasMaxLength(50)
                .HasColumnName("season_type");
            entity.Property(e => e.Submitted).HasColumnName("submitted");

            entity.HasOne(d => d.ArrivalPortNavigation).WithMany(p => p.RecordArrivalPortNavigations)
                .HasForeignKey(d => d.ArrivalPort)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_records_arrival_port");

            entity.HasOne(d => d.DeparturePortNavigation).WithMany(p => p.RecordDeparturePortNavigations)
                .HasForeignKey(d => d.DeparturePort)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_records_departure_port");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK_Users");
            entity.ToTable("users");

            entity.Property(e => e.UserId)
                .HasColumnName("user_id");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("created_by");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("modified_date");
            entity.Property(e => e.UserEmail)
                .HasMaxLength(50)
                .HasColumnName("user_email");
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("user_name");
        });

        modelBuilder.Entity<Vessel>(entity =>
        {
            entity.HasKey(e => e.VesselId);
            entity.ToTable("vessels");

            entity.Property(e => e.VesselId)
                .HasColumnName("vessel_id");
            entity.Property(e => e.VesselName).HasColumnName("vessel_name");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("created_by");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasColumnName("modified_by");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("modified_date");
        });

        // New/Updated entity configurations
        modelBuilder.Entity<ShortVoyageRecord>(entity =>
        {
            entity.HasKey(e => e.RecordId);
            entity.ToTable("short_voyage_records");

            entity.Property(e => e.RecordId)
                .HasColumnName("record_id");
            entity.Property(e => e.DepartureTime)
                .IsRequired()
                .HasColumnName("departure_time");
            entity.Property(e => e.ArrivalTime)
                .IsRequired()
                .HasColumnName("arrival_time");
            entity.Property(e => e.ForecastTime)
                .HasColumnName("forecast_time");
            entity.Property(e => e.ForecastHswell)
                .HasColumnName("forecast_hswell");
            entity.Property(e => e.ForecastHwind)
                .HasColumnName("forecast_hwind");

            entity.HasOne(d => d.Record).WithOne(p => p.ShortVoyageRecord)
                .HasForeignKey<ShortVoyageRecord>(d => d.RecordId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_short_voyage_records_records");
        });

        modelBuilder.Entity<SeasonType>(entity =>
        {
            entity.HasKey(e => e.SeasonTypeId);
            entity.ToTable("season_types");

            entity.Property(e => e.SeasonTypeId)
                .HasColumnName("season_type");
            entity.Property(e => e.SeasonName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("season_name");
        });

        modelBuilder.Entity<VoyageLegReductionFactor>(entity =>
        {
            entity.HasKey(e => new { e.VoyageLegId, e.SeasonType });
            entity.ToTable("voyage_leg_reduction_factors");

            entity.Property(e => e.VoyageLegId)
                .HasColumnName("voyage_led_id");
            entity.Property(e => e.SeasonType)
                .HasColumnName("season_type");
            entity.Property(e => e.ReductionFactor)
                .HasColumnName("reduction_factor");

            entity.HasOne(d => d.VoyageLeg).WithMany(p => p.VoyageLegReductionFactors)
                .HasForeignKey(d => d.VoyageLegId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_voyage_leg_reduction_factors_voyage_legs");

            entity.HasOne(d => d.SeasonTypeNavigation).WithMany(p => p.VoyageLegReductionFactors)
                .HasForeignKey(d => d.SeasonType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_voyage_leg_reduction_factors_season_types");
        });

        modelBuilder.Entity<RecordReductionFactor>(entity =>
        {
            entity.HasKey(e => new { e.RecordId, e.SeasonType });
            entity.ToTable("record_reduction_factors");

            entity.Property(e => e.RecordId)
                .HasColumnName("record_id");
            entity.Property(e => e.SeasonType)
                .HasColumnName("season_type");
            entity.Property(e => e.ReductionFactor)
                .IsRequired()
                .HasColumnName("reduction_factor");

            entity.HasOne(d => d.Record).WithMany(p => p.RecordReductionFactors)
                .HasForeignKey(d => d.RecordId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_record_reduction_factors_records");

            entity.HasOne(d => d.SeasonTypeNavigation).WithMany(p => p.RecordReductionFactors)
                .HasForeignKey(d => d.SeasonType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_record_reduction_factors_season_types");
        });

        modelBuilder.Entity<RoutePoint>(entity =>
        {
            entity.HasKey(e => e.RoutePointId);
            entity.ToTable("route_points");

            entity.Property(e => e.RoutePointId)
                .HasColumnName("route_point_id");
            entity.Property(e => e.RouteVersionId)
                .IsRequired()
                .HasColumnName("route_version_id");
            entity.Property(e => e.RoutePointOrder)
                .IsRequired()
                .HasColumnName("route_point_order");
            entity.Property(e => e.GeoPointId)
                .IsRequired()
                .HasColumnName("geo_point_id");
            entity.Property(e => e.SegDistance)
                .IsRequired()
                .HasColumnName("seg_distance");

            entity.HasOne(d => d.RouteVersion).WithMany(p => p.RoutePoints)
                .HasForeignKey(d => d.RouteVersionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_route_points_route_versions");

            entity.HasOne(d => d.GeoPoint).WithMany(p => p.RoutePoints)
                .HasForeignKey(d => d.GeoPointId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_route_points_geo_points");
        });

        modelBuilder.Entity<RouteVersion>(entity =>
        {
            entity.HasKey(e => e.RouteVersionId);
            entity.ToTable("route_versions");

            entity.Property(e => e.RouteVersionId)
                .HasColumnName("route_version_id");
            entity.Property(e => e.RecordId)
                .IsRequired()
                .HasColumnName("record_id");
            entity.Property(e => e.RecordRouteVersion)
                .IsRequired()
                .HasColumnName("record_route_version");

            entity.HasOne(d => d.Record).WithMany(p => p.RouteVersions)
                .HasForeignKey(d => d.RecordId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_route_versions_records");
        });

        modelBuilder.Entity<VoyageLeg>(entity =>
        {
            entity.HasKey(e => e.VoyageLegId);
            entity.ToTable("voyage_legs");

            entity.Property(e => e.VoyageLegId)
                .HasColumnName("voyage_leg_id");
            entity.Property(e => e.RouteVersionId)
                .IsRequired()
                .HasColumnName("route_version_id");
            entity.Property(e => e.VoyageLegOrder)
                .IsRequired()
                .HasColumnName("voyage_leg_order");
            entity.Property(e => e.DeparturePort)
                .HasColumnName("departure_port");
            entity.Property(e => e.ArrivalPort)
                .HasColumnName("arrival_port");
            entity.Property(e => e.Distance)
                .HasColumnName("distance");

            entity.HasOne(d => d.RouteVersion).WithMany(p => p.VoyageLegs)
                .HasForeignKey(d => d.RouteVersionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_voyage_legs_route_versions");

            entity.HasOne(d => d.DeparturePortNavigation).WithMany(p => p.DepartureVoyageLegs)
                .HasForeignKey(d => d.DeparturePort)
                .HasConstraintName("FK_voyage_legs_departure_port");

            entity.HasOne(d => d.ArrivalPortNavigation).WithMany(p => p.ArrivalVoyageLegs)
                .HasForeignKey(d => d.ArrivalPort)
                .HasConstraintName("FK_voyage_legs_arrival_port");
        });

        modelBuilder.Entity<Group>(entity =>
        {
            entity.HasKey(e => e.GroupId);
            entity.ToTable("groups");

            entity.Property(e => e.GroupId)
                .HasColumnName("group_id");
            entity.Property(e => e.GroupName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("group_name");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.GroupId);
            entity.ToTable("customers");

            entity.Property(e => e.GroupId)
                .HasColumnName("group_id");
            entity.Property(e => e.CustomerWcn)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("customer_wcn");
            entity.Property(e => e.CustomerName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("customer_name");

            entity.HasOne(d => d.Group).WithOne(p => p.Customer)
                .HasForeignKey<Customer>(d => d.GroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_customers_groups");
        });

        modelBuilder.Entity<GroupUser>(entity =>
        {
            entity.HasKey(e => e.GroupUserId);
            entity.ToTable("group_users");

            entity.Property(e => e.GroupUserId)
                .HasColumnName("group_user_id");
            entity.Property(e => e.GroupId)
                .IsRequired()
                .HasColumnName("group_id");
            entity.Property(e => e.UserId)
                .IsRequired()
                .HasColumnName("user_id");

            entity.HasOne(d => d.Group).WithMany(p => p.GroupUsers)
                .HasForeignKey(d => d.GroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_group_users_groups");

            entity.HasOne(d => d.User).WithMany(p => p.GroupUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_group_users_users");
        });

        modelBuilder.Entity<RecordUser>(entity =>
        {
            entity.HasKey(e => e.RecordUserId);
            entity.ToTable("record_users");

            entity.Property(e => e.RecordUserId)
                .HasColumnName("record_user_id");
            entity.Property(e => e.RecordId)
                .IsRequired()
                .HasColumnName("record_id");
            entity.Property(e => e.UserId)
                .IsRequired()
                .HasColumnName("user_id");

            entity.HasOne(d => d.Record).WithMany(p => p.RecordUsers)
                .HasForeignKey(d => d.RecordId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_record_users_records");

            entity.HasOne(d => d.User).WithMany(p => p.RecordUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_record_users_users");
        });

        modelBuilder.Entity<RecordVessel>(entity =>
        {
            entity.HasKey(e => e.RecordVesselId);
            entity.ToTable("record_vessels");

            entity.Property(e => e.RecordVesselId)
                .HasColumnName("record_vessel_id");
            entity.Property(e => e.RecordId)
                .IsRequired()
                .HasColumnName("record_id");
            entity.Property(e => e.VesselId)
                .IsRequired()
                .HasColumnName("vessel_id");

            entity.HasOne(d => d.Record).WithMany(p => p.RecordVessels)
                .HasForeignKey(d => d.RecordId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_record_vessels_records");

            entity.HasOne(d => d.Vessel).WithMany(p => p.RecordVessels)
                .HasForeignKey(d => d.VesselId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_record_vessels_vessels");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}