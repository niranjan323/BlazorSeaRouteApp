@page "/MyRoutes"
@using System.Globalization
@inject NavigationManager navigationManager;
@rendermode InteractiveServer
@using System.IO
@using SeaRouteBlazorServerApp.Components.Services
@using SeaRouteModel.Models
@inject IJSRuntime JSRuntime;
@inject IApiService apiService;
@inject RouteService routeService;
<div class="cls_myroute_content">

        <div class="cls_route_div_rep"  >
            <div class="cls_flex cls_flex_gap_8px cls_flex_align_center"  >
                <label class="cls_myroute_label">Sort by</label>
                <div class="dropdown">
                    <button class="dropdown-button" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <img src="@currentIcon" class="dropdown-icon" /> @currentLabel
                    </button>

                    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                        <div class="dropdown-item-container">
                            <img src="images/route_name.svg" class="dropdown-item-icon" />
                            <a class="dropdown-item" @onclick="@(() => SortedList("name", "asc", "Route Name", "images/route_name.svg"))">Route Name</a>
                        </div>
                        <div class="dropdown-item-container">
                            <img src="images/loading_port.svg" class="dropdown-item-icon" />
                            <a class="dropdown-item" @onclick="@(() => SortedList("pod", "asc", "Port of Departure", "images/loading_port.svg"))">Port of Departure</a>
                        </div>
                        <div class="dropdown-item-container">
                            <img src="images/location pin.svg" class="dropdown-item-icon" />
                            <a class="dropdown-item" @onclick="@(() => SortedList("Arr", "asc", "Port of Arrival", "images/location pin.svg"))">Port of Arrival</a>
                        </div>
                        <div class="dropdown-item-container">
                            <img src="images/date_of_voyage.svg" class="dropdown-item-icon" />
                            <a class="dropdown-item" @onclick="@(() => SortedList("date", "asc", "Date of Voyage", "images/date_of_voyage.svg"))">Date of Voyage</a>
                        </div>
                        <div class="dropdown-item-container">
                            <img src="images/Calculate.svg" class="dropdown-item-icon" />
                            <a class="dropdown-item" @onclick="@(() => SortedList("rf", "asc", "Reduction Factor", "images/Calculate.svg"))">Reduction Factor</a>
                        </div>
                        <div class="dropdown-item-container">
                            <img src="images/vessel_IMO_icon.svg" class="dropdown-item-icon" />
                            <a class="dropdown-item" @onclick="@(() => SortedList("imo", "asc", "Vessel IMO", "images/vessel_IMO_icon.svg"))">Vessel IMO</a>
                        </div>
                        <div class="dropdown-item-container">
                            <img src="images/Vessel_name_icon.svg" class="dropdown-item-icon" />
                            <a class="dropdown-item" @onclick="@(() => SortedList("vesselname", "asc", "Vessel Name", "images/Vessel_name_icon.svg"))">Vessel Name</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>


   
        <div class="cls_route_div_rep"  >
            <div class="cls_flex cls_flex_gap_8px cls_flex_align_center"  >
                <h3 class="cls_myroute_label"  >
                    Select and show on map
                </h3>
            </div>
        </div>



    <div class="cls_myroute_table">
        <table>
            <thead>
                <tr>
                    <th class="cls_width1"></th>
                    <th class="cls_width1">
                        <input type="checkbox" @onclick="SelectAll" id="checkAll" @bind="CheckAll">
                    </th>
                    <th>
                        <div class="cls_table_div">
                            <img src="images/route_name.svg" class="cls_myroute_table_img" />
                            Route Name
                        </div>
                    </th>
                    <th>
                        <div class="cls_table_div">
                            <img src="images/calculation_type.svg" class="cls_myroute_table_img" />
                            Calcs Type
                        </div>
                    </th>
                    <th>
                        <div class="cls_table_div">
                            <img src="images/vessel_IMO_icon.svg" class="cls_myroute_table_img" />
                            Vessel<br />IMO
                        </div>
                    </th>
                    <th>
                        <div class="cls_table_div">
                            <img src="images/Vessel_name_icon.svg" class="cls_myroute_table_img" />
                            Vessel<br />Name
                        </div>
                    </th>
                    <th>
                        <div class="cls_table_div">
                            <img src="images/loading_port.svg" class="cls_myroute_table_img" />
                            Port of<br />Departure
                        </div>
                    </th>
                    <th>
                        <div class="cls_table_div">
                            <img src="images/location pin.svg" class="cls_myroute_table_img" />
                            Port of<br />Arrival
                        </div>
                    </th>
                    <th>
                        <div class="cls_table_div">
                            <img src="images/routes.png" class="cls_myroute_table_img" />
                            Route<br />Distance
                        </div>
                    </th>
                    <th>
                        <div class="cls_table_div">
                            <img src="images/Calculate.svg" class="cls_myroute_table_img" />
                            Short Voyage<br />Reduction Factor
                        </div>
                    </th>
                    <th>
                        <div class="cls_table_div">
                            <img src="images/reduction-factor.png" class="cls_myroute_table_img" />
                            Reduction<br />Factor
                        </div>
                    </th>
                    <th>
                        <div class="cls_table_div">
                            <img src="images/Spring.svg" class="cls_myroute_table_img" />
                            Spring
                        </div>
                    </th>
                    <th>
                        <div class="cls_table_div">
                            <img src="images/Summer.svg" class="cls_myroute_table_img" />
                            Summer
                        </div>
                    </th>
                    <th>
                        <div class="cls_table_div">
                            <img src="images/Fall.svg" class="cls_myroute_table_img" />
                            Fall
                        </div>
                    </th>
                    <th>
                        <div class="cls_table_div">
                            <img src="images/Winter.svg" class="cls_myroute_table_img" />
                            Winter
                        </div>
                    </th>
                    <th class="cls_width3">
                        <div class="cls_table_div">
                            <img src="images/Actions.svg" class="cls_myroute_table_img" />
                            Actions
                        </div>
                    </th>
                </tr>
            </thead>
            <tbody>

                @if (routelist != null)
                {
                    @foreach (var item in routelist)
                    {
                        var routeId = item.RecordId;
                        var routeName = item.RecordName;
                        <tr class="cls_myroute_table_tr_selected">
                            <td >
                                @if (item.Expanded)
                                {
                                    <span class="expand-btn" @onclick="@(() => ToggleExpand(item))">−</span>
                                }
                                else
                                {
                                    <span class="expand-btn" @onclick="@(() => ToggleExpand(item))">+</span>
                                }
                            </td>
                            <td >
                                <input  type="checkbox" @onclick="@(() => SelectRoute(routeId))" @bind="item.IsSelected">
                            </td>
                            <td>@item.RecordName</td>
                            <td>Reduction Factor</td>
                            <td>@item.VesselIMO</td>
                            <td>@item.VesselName</td>
                            <td>@item.DeparturePort</td>
                            <td>@item.ArrivalPort</td>
                            <td>@Math.Round(item.RouteDistance).ToString() nm</td>
                            <td>@Math.Round(item.ReductionFactor, 2)</td>
                            <td>@Math.Round(item.ReductionFactor, 2)</td>
                            <td >@GetSeasonValue(item, "Spring")</td>
                            <td >@GetSeasonValue(item, "Summer")</td>
                            <td >@GetSeasonValue(item, "Fall")</td>
                            <td >@GetSeasonValue(item, "Winter")</td>
                            <td >
                                <div >
                                    <a href="images/report.png" target="_blank"><img src="images/download-icon-10@1x.png" class="cls_myroute_table_img" /></a>
                                    <img src="images/edit.svg" class="cls_myroute_table_img" />
                                    <a @onclick="@(() => DeleteVesselRoute(routeId))"><img src="images/remove.svg" class="cls_myroute_table_img" /></a>
                                </div>
                            </td>
                        </tr>

                        if (item.Legs.Count > 0 && item.Expanded)
                        {
                            @foreach (var childItem in item.Legs)
                            {
                                <tr class="cls_myroute_table_tr">
                                    <td ></td>
                                    <td ></td>
                                    <td>@childItem.RecordLegName</td>
                                    <td></td>
                                     <td>@item.VesselIMO</td>
                                     <td>@item.VesselName</td>
                                     <td>@childItem.DeparturePort</td>
                                    <td>@childItem.ArrivalPort</td>
                                    <td>@Math.Round(childItem.Distance) nm</td>
                                    <td>@Math.Round(childItem.ReductionFactor, 3)</td>
                                    <td>@Math.Round(childItem.ReductionFactor, 3)</td>

                                    <td >@GetSeasonValue(childItem, "Spring")</td>
                                    <td >@GetSeasonValue(childItem, "Summer")</td>
                                    <td >@GetSeasonValue(childItem, "Fall")</td>
                                    <td >@GetSeasonValue(childItem, "Winter")</td>
                                    <td >
                                        <div >
                                            <img src="images/download-icon-10@1x.png" class="cls_myroute_table_img" />
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    }
                }
            </tbody>
        </table>
    </div>


    @if (routelist != null && routelist.Any(x => x.IsSelected))
    {
        <div class="view-map-footer">
            <img src="images/map-icon@1x.png" class="view-map-icon" />
            <a class="view-map-link" @onclick="@(() => ViewOnMap())">
                View on map
                <img src="images/right arrow.png" class="arrow-icon" />
            </a>
        </div>
    }
</div>

@code {
    List<RouteListModel> routelist { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        var list = await GetRouteList();
        routelist = list;
        routelist = routelist.OrderBy(x => x.RecordName).ToList();

        var items = routeService.RouteNames;
        if (items != null)
{


for (int i = 0; i < items.Count; i++)
{
string routeId = items[i].Key;
var item = routelist.FirstOrDefault(x => x.RecordId == routeId);
if (item != null)
item.IsSelected = true;
}
CheckAll = items.Count == routelist.Count ? true : false;
}
}
private DotNetObjectReference<MyRoutes>? objRef;
private async Task<List<RouteListModel>> GetRouteList()
{
try
{
var routes = await apiService.GetRouteList();
if (routes == null)
return new List<RouteListModel>();

return routes;
}
catch (Exception ex)
{
throw;
}

}

private string GetSeasonValue(dynamic item, string season)
{
    // For the demo, we'll return placeholder values
    // In real implementation, you would get these from your data model
    if (season == "Spring") return "0.85";
    if (season == "Summer") return "0.85";
    if (season == "Fall") return "0.85";
    if (season == "Winter") return "0.85";
   
    return "0.80";
}
bool CheckAll { get; set; } = false;
async Task ToggleExpand(RouteListModel route)
{
route.Expanded = !route.Expanded;
var legs = await apiService.GetRouteLegsList(route.RecordId);
if (legs.Count > 0)
{
route.Legs = legs;
StateHasChanged();
}

await Task.CompletedTask;
}
void SelectAll()
{
for (int i = 0; i < routelist.Count; i++)
{
routelist[i].IsSelected = !CheckAll;
}
CheckAll = routelist.Where(x => x.IsSelected == true).Count() == routelist.Count();
}
void SelectRoute(string routeId)
{
var route = routelist.Where(x => x.RecordId == routeId).First();
route.IsSelected = !route.IsSelected;

CheckAll = routelist.Where(x => x.IsSelected == true).Count() == routelist.Count();
}
void DeleteVesselRoute(string routeId)
{
var route = routelist.FirstOrDefault(x => x.RecordId == routeId);
if (route != null)
routelist.Remove(route);
}
void DownloadReport(string routeId)
{
// var filePath = Path.Combine(Env.WebRootPath, "files", "sample.pdf");
// byte[] fileBytes = await File.ReadAllBytesAsync(filePath);
// // Convert to base64
// string base64String = Convert.ToBase64String(fileBytes);
// // Trigger download
// await JS.InvokeVoidAsync("saveAsFile", "sample.pdf", base64String);
}
void ViewOnMap()
{
if (routeService.RouteNames != null)
routeService.RouteNames.Clear();

var routes = routelist.Where(x => x.IsSelected == true)
.Select(x => new KeyValuePair<string, string>(x.RecordId, x.DeparturePort + "-" + x.ArrivalPort)).ToList();

routeService.RouteNames = routes;
navigationManager.NavigateTo("BackToMyRoutes");
}

void Back()
{
navigationManager.NavigateTo("/");
}

private string currentLabel = "Route Name A-Z";
private string currentIcon = "Assets/route_name.svg";

void SortedList(string sortName, string sortOrder, string label, string icon)
{
currentLabel = label;
currentIcon = icon;
switch (sortName)
{
case "name":
{
routelist = (sortOrder == "asc" ? routelist.OrderBy(x => x.RecordName) : routelist.OrderByDescending(x => x.RecordName)).ToList();
break;
}
case "pod":
{
routelist = (sortOrder == "asc" ? routelist.OrderBy(x => x.DeparturePort) : routelist.OrderByDescending(x => x.DeparturePort)).ToList();
break;
}
case "Arr":
{
routelist = (sortOrder == "asc" ? routelist.OrderBy(x => x.ArrivalPort) : routelist.OrderByDescending(x => x.ArrivalPort)).ToList();
break;
}
case "date":
{
routelist = (sortOrder == "asc" ? routelist.OrderBy(x => x.VoyageDate) : routelist.OrderByDescending(x => x.VoyageDate)).ToList();
break;

}
case "imo":
{
routelist = (sortOrder == "asc" ? routelist.OrderBy(x => x.VesselIMO) : routelist.OrderByDescending(x => x.VesselIMO)).ToList();
break;

}
case "vesselname":
{
routelist = (sortOrder == "asc" ? routelist.OrderBy(x => x.VesselName) : routelist.OrderByDescending(x => x.VesselName)).ToList();
break;

}
default:
{
routelist = routelist.OrderBy(x => x.RecordName).ToList();
break;
}

}
}

protected override async Task OnAfterRenderAsync(bool firstRender)
{
if (firstRender)
{
objRef = DotNetObjectReference.Create(this);
await JSRuntime.InvokeVoidAsync("initializeMap", objRef);
}
}
}